GCC = riscv64-unknown-elf-gcc
OBJ_DUMP = riscv64-unknown-elf-objdump
OBJ_COPY = riscv64-unknown-elf-objcopy
C_SRC_DIR =	.
ASM_SRC_DIR = .
LDS_SRC_DIR = . 
RESULT_DIR = .
MEM_SIZE = 1024  

all: $(RESULT_DIR)/firmware.hex $(RESULT_DIR)/dumpfile

$(RESULT_DIR)/firmware.hex: $(RESULT_DIR)/firmware.bin makehex.py
	python makehex.py $< $(MEM_SIZE) > $@

$(RESULT_DIR)/firmware.bin: $(C_SRC_DIR)/firmware.elf
	$(OBJ_COPY) -O binary $< $@

$(RESULT_DIR)/dumpfile: $(C_SRC_DIR)/firmware.elf
	$(OBJ_DUMP) -d $^ > $@

$(C_SRC_DIR)/firmware.elf: $(C_SRC_DIR)/main.o $(ASM_SRC_DIR)/start.o sections.lds
	$(GCC) -Os -mabi=ilp32 -march=rv32i -ffreestanding -nostdlib -o $@ -Wl,--build-id=none,-Bstatic,-T,sections.lds,-Map,$(RESULT_DIR)/firmware.map,--strip-debug $(ASM_SRC_DIR)/start.o $(C_SRC_DIR)/main.o -lgcc 

$(C_SRC_DIR)/main.o: $(ASM_SRC_DIR)/main.c
	$(GCC) -c  -Iinclude/ -mabi=ilp32 -march=rv32i -Os --std=c99 -ffreestanding -nostdlib -o $@ $< 

$(ASM_SRC_DIR)/start.o: $(ASM_SRC_DIR)/start.S
	$(GCC) -c -mabi=ilp32 -march=rv32i -o $@ $<

clean:
	del *.o dumpfile *.elf *.hex *.bin *.map